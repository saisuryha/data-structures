#include <stdio.h>
#include <stdlib.h>

#define MAX_NODES 100

struct Node {
    int data;
    struct Node* next;
};

struct Graph {
    int numNodes;
    struct Node* adjacencyList[MAX_NODES];
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void addEdge(struct Graph* graph, int src, int dest) {
    struct Node* newNode = createNode(dest);
    newNode->next = graph->adjacencyList[src];
    graph->adjacencyList[src] = newNode;
}
void dfs(struct Graph* graph, int current, int* visited) {
    visited[current] = 1;
    printf("%d ", current);

    struct Node* neighbor = graph->adjacencyList[current];
    while (neighbor != NULL) {
        if (!visited[neighbor->data]) {
            dfs(graph, neighbor->data, visited);
        }
        neighbor = neighbor->next;
    }
}
void bfs(struct Graph* graph, int start) {
    int visited[MAX_NODES] = {0};
    int queue[MAX_NODES];
    int front = 0;
    int rear = 0;

    visited[start] = 1;
    queue[rear++] = start;

    while (front < rear) {
        int current = queue[front++];
        printf("%d ", current);

        struct Node* neighbor = graph->adjacencyList[current];
        while (neighbor != NULL) {
            if (!visited[neighbor->data]) {
                visited[neighbor->data] = 1;
                queue[rear++] = neighbor->data;
            }
            neighbor = neighbor->next;
        }
    }
}

int main() {
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    graph->numNodes = 7;
	int i;
    for (i = 0; i < graph->numNodes; ++i) {
        graph->adjacencyList[i] = NULL;
    }

    addEdge(graph, 0, 1);
    addEdge(graph, 0, 2);
    addEdge(graph, 1, 3);
    addEdge(graph, 1, 4);
    addEdge(graph, 2, 5);
    addEdge(graph, 2, 6);

    printf("DFS traversal: ");
    int visited_dfs[MAX_NODES] = {0};
    dfs(graph, 0, visited_dfs);
    printf("\n");

    printf("BFS traversal: ");
    bfs(graph, 0);
    printf("\n");

    return 0;
}
